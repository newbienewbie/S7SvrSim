<UserControl x:Class="S7SvrSim.UserControls.SignalWatchCtrl"
             xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
             xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
             xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
             xmlns:d="http://schemas.microsoft.com/expression/blend/2008"
             xmlns:local="clr-namespace:S7SvrSim.UserControls"
             xmlns:vm="clr-namespace:S7SvrSim.ViewModels"
             xmlns:md="http://materialdesigninxaml.net/winfx/xaml/themes"
             xmlns:lu="clr-namespace:Less.Utils.WPF;assembly=Less.Utils.WPF"
             xmlns:shared="clr-namespace:S7SvrSim.Shared"
             xmlns:signal="clr-namespace:S7SvrSim.S7Signal"
             xmlns:ucs="clr-namespace:S7SvrSim.UserControls.Signals"
             xmlns:vms="clr-namespace:S7SvrSim.ViewModels.Signals"
             xmlns:i="http://schemas.microsoft.com/xaml/behaviors"
             xmlns:sys="clr-namespace:System;assembly=mscorlib"
             mc:Ignorable="d"
             d:DesignHeight="450"
             d:DesignWidth="800"
             d:Background="White"
             d:DataContext="{d:DesignInstance Type=vm:SignalPageVM}"
             >
    <UserControl.Resources>
        <lu:BindingProxy x:Key="DataContextProxy"
                         Data="{Binding RelativeSource={RelativeSource Mode=FindAncestor, AncestorType=UserControl}, Path=DataContext}"
                         />
        <ucs:DescriptionConverter x:Key="DescriptionConverter" />
        <shared:IsTypeToBooleanConverter x:Key="IsTypeToBooleanConverter" />
        <Style TargetType="Border"
               x:Key="SepectorBorder"
               >
            <Setter Property="Background">
                <Setter.Value>
                    <SolidColorBrush Color="{StaticResource {x:Static SystemColors.ActiveBorderColorKey}}" />
                </Setter.Value>
            </Setter>
            <Setter Property="Margin" Value="5 3" />
            <Setter Property="CornerRadius" Value="1" />
        </Style>
        <shared:EqualToBooleanConverter x:Key="EqualToBooleanConverter" />
    </UserControl.Resources>
    <DockPanel>
        <StackPanel DockPanel.Dock="Top">
            <Menu>
                <MenuItem Header="信号">
                    <MenuItem Header="新建信号"
                              ItemsSource="{Binding SignalTypes}"
                              >
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="MenuItem"
                                   BasedOn="{StaticResource ResourceKey={x:Type MenuItem}}"
                                   >
                                <Setter Property="Header" Value="{Binding Name}" />
                                <Setter Property="Command" Value="{Binding Source={StaticResource DataContextProxy}, Path=Data.Signals.NewSignalCommand}" />
                                <Setter Property="CommandParameter" Value="{Binding .}" />
                                <Setter Property="ToolTip" Value="{Binding ., Converter={StaticResource DescriptionConverter}, Mode=OneWay}" />
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <MenuItem Header="插入信号"
                              ItemsSource="{Binding SignalTypes}"
                              Visibility="{Binding DragSignalsVM.IsDragSignals, Converter={StaticResource InverseBoolToVisConverter}}"
                              ToolTip="在当前选择的信号前插入新的信号"
                              >
                        <MenuItem.ItemContainerStyle>
                            <Style TargetType="MenuItem"
                                   BasedOn="{StaticResource ResourceKey={x:Type MenuItem}}"
                                   >
                                <Setter Property="Header" Value="{Binding Name}" />
                                <Setter Property="Command" Value="{Binding Source={StaticResource DataContextProxy}, Path=Data.Signals.InsertSignalCommand}" />
                                <Setter Property="CommandParameter" Value="{Binding .}" />
                                <Setter Property="ToolTip" Value="{Binding ., Converter={StaticResource DescriptionConverter}, Mode=OneWay}" />
                            </Style>
                        </MenuItem.ItemContainerStyle>
                    </MenuItem>
                    <MenuItem Header="删除选择的信号"
                              Command="{Binding Signals.RemoveSelectedSignalsCommand}"
                              />
                    <MenuItem Header="删除所有信号"
                              Command="{Binding Signals.ClearSignalsCommand}"
                              />
                </MenuItem>
                <MenuItem Header="快速地址"
                          ToolTip="根据前一个地址自动设置下一个地址"
                          >
                    <MenuItem Header="首项开始"
                              Command="{Binding Signals.UpdateAddressFromFirstCommand}"
                              />
                    <MenuItem Header="从选择项开始"
                              Command="{Binding Signals.UpdateAddressFromFirstSelectedCommand}"
                              />
                    <MenuItem Header="仅选择项"
                              Command="{Binding Signals.UpdateAddressFromSelectedItemsCommand}"
                              />
                    <Separator />
                    <MenuItem Header="清空地址"
                              Command="{Binding Signals.ClearAddressCommand}"
                              />
                    <Separator />
                    <MenuItem Header="配置项">
                        <MenuItem Header="根据 DB 分配地址"
                                  IsCheckable="True"
                                  IsChecked="{Binding UpdateAddressOptionsVM.UpdateAddressByDbIndex, Mode=TwoWay}"
                                  />
                        <Separator />
                        <MenuItem Header="禁止地址存在奇数"
                                  IsCheckable="True"
                                  IsChecked="{Binding UpdateAddressOptionsVM.ForbidIndexHasOddNumber, Mode=TwoWay}"
                                  />
                        <MenuItem Header="允许 Bool 地址存在奇数"
                                  IsCheckable="True"
                                  IsChecked="{Binding UpdateAddressOptionsVM.AllowBoolIndexHasOddNumber, Mode=TwoWay}"
                                  ToolTip="如果禁止地址存在奇数，该项启用后可以允许 Bool 类型的地址存在奇数"
                                  />
                        <MenuItem Header="允许 Byte 地址存在奇数"
                                  IsCheckable="True"
                                  IsChecked="{Binding UpdateAddressOptionsVM.AllowByteIndexHAsOddNumber, Mode=TwoWay}"
                                  ToolTip="如果禁止地址存在奇数，该项启用后可以允许 Byte 类型的地址存在奇数"
                                  />
                        <Separator />
                        <MenuItem Header="String 按十进位地址占用计算"
                                  IsCheckable="True"
                                  IsChecked="{Binding UpdateAddressOptionsVM.StringUseTenCeiling, Mode=TwoWay}"
                                  ToolTip="启用该项，String类型的占用会按10的整数倍进行计算"
                                  />
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="排序">
                    <MenuItem Header="根据地址"
                              Command="{Binding Signals.OrderByCommand}"
                              >
                        <MenuItem.CommandParameter>
                            <vm:SignalSortBy>Address</vm:SignalSortBy>
                        </MenuItem.CommandParameter>
                    </MenuItem>
                    <MenuItem Header="根据信号名"
                              Command="{Binding Signals.OrderByCommand}"
                              >
                        <MenuItem.CommandParameter>
                            <vm:SignalSortBy>Name</vm:SignalSortBy>
                        </MenuItem.CommandParameter>
                    </MenuItem>
                    <MenuItem Header="根据信号类型"
                              Command="{Binding Signals.OrderByCommand}"
                              >
                        <MenuItem.CommandParameter>
                            <vm:SignalSortBy>Type</vm:SignalSortBy>
                        </MenuItem.CommandParameter>
                    </MenuItem>
                </MenuItem>
                <MenuItem Header="Excel">
                    <MenuItem Header="导出"
                              Command="{Binding SignalExcelVM.ExportSignalsCommand}"
                              Icon="{md:PackIcon Kind=FileExport}"
                              />
                    <MenuItem Header="导入"
                              Command="{Binding SignalExcelVM.ImportSignalsCommand}"
                              Icon="{md:PackIcon Kind=FileImport}"
                              />
                    <Separator />
                    <MenuItem Header="导入设置">
                        <MenuItem Header="同名组替换规则">
                            <MenuItem Header="无操作"
                                      IsCheckable="True"
                                      IsChecked="{Binding SignalExcelVM.SameGroupImportRule, Converter={StaticResource EqualToBooleanConverter}, ConverterParameter={x:Static vms:SameGroupImportRule.None}, Mode=OneWay}"
                                      Command="{Binding SignalExcelVM.SetSameGroupRuleCommand}"
                                      CommandParameter="{x:Static vms:SameGroupImportRule.None}"
                                      />
                            <MenuItem Header="替换组"
                                      IsCheckable="True"
                                      IsChecked="{Binding SignalExcelVM.SameGroupImportRule, Converter={StaticResource EqualToBooleanConverter}, ConverterParameter={x:Static vms:SameGroupImportRule.ReplaceGroup}, Mode=OneWay}"
                                      Command="{Binding SignalExcelVM.SetSameGroupRuleCommand}"
                                      CommandParameter="{x:Static vms:SameGroupImportRule.ReplaceGroup}"
                                      />
                            <MenuItem Header="补充"
                                      IsCheckable="True"
                                      IsChecked="{Binding SignalExcelVM.SameGroupImportRule, Converter={StaticResource EqualToBooleanConverter}, ConverterParameter={x:Static vms:SameGroupImportRule.ExtendGroup}, Mode=OneWay}"
                                      Command="{Binding SignalExcelVM.SetSameGroupRuleCommand}"
                                      CommandParameter="{x:Static vms:SameGroupImportRule.ExtendGroup}"
                                      />
                        </MenuItem>
                    </MenuItem>
                </MenuItem>
            </Menu>
            <StackPanel Orientation="Horizontal"
                        Margin="5 5"
                        >
                <TextBlock Text="扫描间隔: "
                           VerticalAlignment="Center"
                           />
                <TextBox Text="{Binding WatchVM.ScanSpan}"
                         Width="80"
                         md:TextFieldAssist.SuffixText="ms"
                         VerticalAlignment="Center"
                         d:Text="123"
                         />
                <TextBlock Margin="20 0 0 0"
                           Text="新信号组: "
                           VerticalAlignment="Center"
                           />
                <TextBox Width="80"
                         VerticalAlignment="Center"
                         >
                    <TextBox.Text>
                        <Binding Path="Signals.NewGroupName">
                            <Binding.ValidationRules>
                                <lu:EventValidation ValidateEvent="NewGroupName_ValidateEvent" />
                            </Binding.ValidationRules>
                        </Binding>
                    </TextBox.Text>
                </TextBox>
                <Button Margin="10 0 0 0"
                        Content="{md:PackIcon Kind=Plus,
                                              Size=20}"
                        Padding="10 0"
                        Command="{Binding Signals.AddGroupCommand}"
                        />
            </StackPanel>
        </StackPanel>
        <DockPanel>
            <ListBox DockPanel.Dock="Top"
                     ItemsSource="{Binding Signals.SignalGroups}"
                     d:ItemsSource="{d:SampleData}"
                     ScrollViewer.CanContentScroll="True"
                     ScrollViewer.HorizontalScrollBarVisibility="Auto"
                     md:ScrollViewerAssist.IsAutoHideEnabled="True"
                     SelectedValue="{Binding Signals.GroupName}"
                     SelectedValuePath="Name"
                     Style="{StaticResource MaterialDesignNavigationPrimaryListBox}"
                     >
                <ListBox.Resources>
                    <Style TargetType="ScrollViewer"
                           BasedOn="{StaticResource MaterialDesignScrollViewer}"
                           />
                    <Style TargetType="ScrollBar"
                           BasedOn="{StaticResource MaterialDesignScrollBarMinimal}"
                           />
                </ListBox.Resources>
                <ListBox.ItemsPanel>
                    <ItemsPanelTemplate>
                        <StackPanel Orientation="Horizontal" />
                    </ItemsPanelTemplate>
                </ListBox.ItemsPanel>
                <ListBox.ItemTemplate>
                    <DataTemplate>
                        <StackPanel Orientation="Horizontal">
                            <StackPanel.ContextMenu>
                                <ContextMenu>
                                    <MenuItem Header="重命名"
                                              Command="{Binding Source={StaticResource DataContextProxy}, Path=Data.Signals.RenameGroupCommand}"
                                              CommandParameter="{Binding .}"
                                              />
                                    <MenuItem Header="复制"
                                              Command="{Binding Source={StaticResource DataContextProxy}, Path=Data.Signals.CopyGroupCommand}"
                                              CommandParameter="{Binding .}"
                                              />
                                </ContextMenu>
                            </StackPanel.ContextMenu>
                            <TextBlock Text="{Binding Name}" />
                            <Button Command="{Binding Source={StaticResource DataContextProxy}, Path=Data.Signals.DeleteGroupCommand}"
                                    CommandParameter="{Binding .}"
                                    Margin="8 0 0 0"
                                    ToolTip="删除该页"
                                    Padding="0"
                                    Style="{x:Null}"
                                    >
                                <Button.Template>
                                    <ControlTemplate>
                                        <md:PackIcon Kind="Close"
                                                     Background="Transparent"
                                                     Foreground="Red"
                                                     Cursor="Hand"
                                                     />
                                    </ControlTemplate>
                                </Button.Template>
                            </Button>
                        </StackPanel>
                    </DataTemplate>
                </ListBox.ItemTemplate>
            </ListBox>
            <DataGrid ItemsSource="{Binding Signals.Signals, UpdateSourceTrigger=PropertyChanged}"
                      AutoGenerateColumns="False"
                      CanUserDeleteRows="False"
                      CanUserAddRows="False"
                      x:Name="signalGrid"
                      MouseDoubleClick="signalGrid_MouseDoubleClick"
                      SelectedItem="{Binding Signals.SelectedEditObj}"
                      GridLinesVisibility="All"
                      d:ItemsSource="{d:SampleData}"
                      CanUserSortColumns="False"
                      EnableRowVirtualization="True"
                      >
                <DataGrid.ContextMenu>
                    <ContextMenu StaysOpen="True"
                                 Closed="SignalGridContextMenu_Closed"
                                 >
                        <MenuItem Header="新建信号"
                                  ItemsSource="{Binding SignalTypes}"
                                  Visibility="{Binding DragSignalsVM.IsDragSignals, Converter={StaticResource InverseBoolToVisConverter}}"
                                  >
                            <MenuItem.ItemContainerStyle>
                                <Style TargetType="MenuItem"
                                       BasedOn="{StaticResource ResourceKey={x:Type MenuItem}}"
                                       >
                                    <Setter Property="Header" Value="{Binding Name}" />
                                    <Setter Property="Command" Value="{Binding Source={StaticResource DataContextProxy}, Path=Data.Signals.NewSignalCommand}" />
                                    <Setter Property="CommandParameter" Value="{Binding .}" />
                                    <Setter Property="ToolTip" Value="{Binding ., Converter={StaticResource DescriptionConverter}, Mode=OneWay}" />
                                </Style>
                            </MenuItem.ItemContainerStyle>
                        </MenuItem>
                        <MenuItem Header="插入信号"
                                  ItemsSource="{Binding SignalTypes}"
                                  Visibility="{Binding DragSignalsVM.IsDragSignals, Converter={StaticResource InverseBoolToVisConverter}}"
                                  ToolTip="在当前选择的信号前插入新的信号"
                                  >
                            <MenuItem.ItemContainerStyle>
                                <Style TargetType="MenuItem"
                                       BasedOn="{StaticResource ResourceKey={x:Type MenuItem}}"
                                       >
                                    <Setter Property="Header" Value="{Binding Name}" />
                                    <Setter Property="Command" Value="{Binding Source={StaticResource DataContextProxy}, Path=Data.Signals.InsertSignalCommand}" />
                                    <Setter Property="CommandParameter" Value="{Binding .}" />
                                    <Setter Property="ToolTip" Value="{Binding ., Converter={StaticResource DescriptionConverter}, Mode=OneWay}" />
                                </Style>
                            </MenuItem.ItemContainerStyle>
                        </MenuItem>
                        <Separator />
                        <MenuItem Header="复制"
                                  Command="{Binding Signals.CopySignalsCommand}"
                                  Visibility="{Binding DragSignalsVM.IsDragSignals, Converter={StaticResource InverseBoolToVisConverter}}"
                                  />
                        <MenuItem Header="粘贴"
                                  Command="{Binding Signals.PasteSignalsCommand}"
                                  Visibility="{Binding DragSignalsVM.IsDragSignals, Converter={StaticResource InverseBoolToVisConverter}}"
                                  />
                        <Separator />
                        <MenuItem Header="删除选择的信号"
                                  Command="{Binding Signals.RemoveSelectedSignalsCommand}"
                                  Visibility="{Binding DragSignalsVM.IsDragSignals, Converter={StaticResource InverseBoolToVisConverter}}"
                                  />
                        <MenuItem Header="删除所有信号"
                                  Command="{Binding Signals.ClearSignalsCommand}"
                                  Visibility="{Binding DragSignalsVM.IsDragSignals, Converter={StaticResource InverseBoolToVisConverter}}"
                                  />
                        <MenuItem Header="替换"
                                  Command="{Binding DragSignalsVM.ReplaceSignalCommand}"
                                  Visibility="{Binding DragSignalsVM.IsDragSignals, Converter={StaticResource BooleanToVisibilityConverter}}"
                                  />
                        <MenuItem Header="移动到之前"
                                  Command="{Binding DragSignalsVM.MoveSignlsBeforeCommand}"
                                  Visibility="{Binding DragSignalsVM.IsDragSignals, Converter={StaticResource BooleanToVisibilityConverter}}"
                                  />
                        <MenuItem Header="移动到之后"
                                  Command="{Binding DragSignalsVM.MoveSignalsAfterCommand}"
                                  Visibility="{Binding DragSignalsVM.IsDragSignals, Converter={StaticResource BooleanToVisibilityConverter}}"
                                  />
                    </ContextMenu>
                </DataGrid.ContextMenu>
                <DataGrid.RowStyle>
                    <Style TargetType="DataGridRow"
                           BasedOn="{StaticResource ResourceKey={x:Type DataGridRow}}"
                           >
                        <Setter Property="AllowDrop" Value="True" />
                        <EventSetter Event="DragOver"
                                     Handler="DataGridRow_DragOver"
                                     />
                        <EventSetter Event="Drop"
                                     Handler="DataGridRow_Drop"
                                     />
                        <EventSetter Event="DragEnter"
                                     Handler="DataGridRow_DragEnter"
                                     />
                        <EventSetter Event="DragLeave"
                                     Handler="DataGridRow_DragLeave"
                                     />
                    </Style>
                </DataGrid.RowStyle>
                <DataGrid.Columns>
                    <DataGridTemplateColumn>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <Button Cursor="SizeAll"
                                        PreviewMouseLeftButtonDown="DrapButton_PreviewMouseLeftButtonDown"
                                        Content="{md:PackIcon Kind=Drag,
                                                              Size=24}"
                                        Style="{StaticResource MaterialDesignFlatButton}"
                                        Padding="0"
                                        Height="24"
                                        />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTemplateColumn>
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <StackPanel Orientation="Horizontal">
                                    <Button Command="{Binding Data.Signals.RemoveSignalCommand, Source={StaticResource DataContextProxy}}"
                                            CommandParameter="{Binding .}"
                                            Content="{md:PackIcon Kind=Delete}"
                                            Style="{StaticResource MaterialDesignFlatButton}"
                                            Padding="0"
                                            Height="24"
                                            Width="24"
                                            />
                                </StackPanel>
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTextColumn Header="Name"
                                        Binding="{Binding Value.Name, UpdateSourceTrigger=LostFocus}"
                                        EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}"
                                        />
                    <DataGridTemplateColumn Header="Type">
                        <DataGridTemplateColumn.CellTemplate>
                            <DataTemplate>
                                <ComboBox ItemsSource="{Binding Data.SignalTypes, Source={StaticResource DataContextProxy}}"
                                          SelectedValuePath="Name"
                                          DisplayMemberPath="Name"
                                          Text="{Binding SignalType, UpdateSourceTrigger=Explicit}"
                                          LostFocus="ComboBox_LostFocus"
                                          IsEditable="True"
                                          />
                            </DataTemplate>
                        </DataGridTemplateColumn.CellTemplate>
                    </DataGridTemplateColumn>
                    <DataGridTextColumn Header="Address"
                                        EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}"
                                        >
                        <DataGridTextColumn.Binding>
                            <Binding Path="Value.FormatAddress"
                                     UpdateSourceTrigger="LostFocus"
                                     >
                                <Binding.ValidationRules>
                                    <lu:EventValidation ValidateEvent="SignalAddress_ValidateEvent" />
                                </Binding.ValidationRules>
                            </Binding>
                        </DataGridTextColumn.Binding>
                    </DataGridTextColumn>
                    <DataGridTextColumn Header="Value"
                                        Binding="{Binding Value.Value}"
                                        IsReadOnly="True"
                                        Width="160"
                                        />
                    <DataGridTextColumn Header="Remark"
                                        Binding="{Binding Value.Remark, UpdateSourceTrigger=LostFocus}"
                                        EditingElementStyle="{StaticResource MaterialDesignDataGridTextColumnEditingStyle}"
                                        />
                </DataGrid.Columns>
            </DataGrid>
        </DockPanel>
    </DockPanel>
</UserControl>
